diff --git a/Makefile b/Makefile
index 55363a2..3f2a737 100644
--- a/Makefile
+++ b/Makefile
@@ -3268,7 +3268,7 @@ ti8148_evm_min_sd:	unconfig
 			echo "Setting up TI8148 default build with ENV in SPI..." ; \
 		elif [ "$(findstring sd,$@)" ] ; then \
 			echo "#define CONFIG_SYS_NO_FLASH" >> $(obj)include/config.h ; \
-			echo "#define CONFIG_MMC_ENV"    >>$(obj)include/config.h ; \
+			echo "#define TI81XX_SECOND_STAGE"    >>$(obj)include/config.h ; \
 			echo "Setting up TI8148 default build with ENV in MMC..." ; \
 		else	\
 			echo "#define CONFIG_SYS_NO_FLASH" >> $(obj)include/config.h ; \
@@ -3340,6 +3340,7 @@ ti8168_evm_min_sd:	unconfig
 	else	\
 		echo "#define CONFIG_SYS_NO_FLASH"    >>$(obj)include/config.h ; \
 		echo "#define CONFIG_NAND_ENV"    >>$(obj)include/config.h ; \
+		echo "#define TI81XX_SECOND_STAGE"    >>$(obj)include/config.h ; \
 		echo "Setting up TI8168 default build with NAND..." ; \
 	fi;
 	@$(MKCONFIG) -a ti8168_evm arm arm_cortexa8 ti8168 ti ti81xx
diff --git a/board/ti/ti8148/evm.c b/board/ti/ti8148/evm.c
index 4a1436a..5206dde 100644
--- a/board/ti/ti8148/evm.c
+++ b/board/ti/ti8148/evm.c
@@ -194,6 +194,11 @@ int board_init(void)
     */
 	gpmc_set_cs_buswidth(0, get_sysboot_bw());
 #endif
+
+#ifdef TI814X_ENABLE_ICACHE
+    icache_enable();
+#endif
+
 	return 0;
 }
 
diff --git a/common/image.c b/common/image.c
index 247c49e..4ea9431 100644
--- a/common/image.c
+++ b/common/image.c
@@ -450,8 +450,10 @@ phys_size_t getenv_bootm_size(void)
 
 void memmove_wd (void *to, void *from, size_t len, ulong chunksz)
 {
-	if (to == from)
+	if (to == from) {
+        puts("Skipped (already there)\n");
 		return;
+    }
 
 #if defined(CONFIG_HW_WATCHDOG) || defined(CONFIG_WATCHDOG)
 	while (len > 0) {
@@ -465,6 +467,7 @@ void memmove_wd (void *to, void *from, size_t len, ulong chunksz)
 #else	/* !(CONFIG_HW_WATCHDOG || CONFIG_WATCHDOG) */
 	memmove (to, from, len);
 #endif	/* CONFIG_HW_WATCHDOG || CONFIG_WATCHDOG */
+		puts("OK\n");
 }
 #endif /* !USE_HOSTCC */
 
diff --git a/drivers/mtd/nand/ti81xx_nand.c b/drivers/mtd/nand/ti81xx_nand.c
index 6fc94b1..b286c11 100644
--- a/drivers/mtd/nand/ti81xx_nand.c
+++ b/drivers/mtd/nand/ti81xx_nand.c
@@ -884,7 +884,8 @@ int board_nand_init(struct nand_chip *nand)
 		nand->options |= NAND_BUSWIDTH_16;
 	}
 
-	nand->chip_delay = 100;
+    /* tfm: datasheet of evm eval board's NAND says 25 us */
+	nand->chip_delay = 25;
 
 	/* fallback ecc info, this will be overridden by 
 	 * ti81xx_nand_switch_ecc() below to 1-bit h/w ecc
diff --git a/include/configs/ti8148_evm.h b/include/configs/ti8148_evm.h
index 33f7bea..f4bc7ff 100644
--- a/include/configs/ti8148_evm.h
+++ b/include/configs/ti8148_evm.h
@@ -17,134 +17,139 @@
 #ifndef __CONFIG_TI8148_EVM_H
 #define __CONFIG_TI8148_EVM_H
 
-/*
- *#define CONFIG_TI814X_NO_RUNTIME_PG_DETECT
- */
-
-/* Display CPU info */
-#define CONFIG_DISPLAY_CPUINFO          1
+/* Only one the following two options (DDR3/DDR2) should be enabled */
+#define CONFIG_TI814X_CONFIG_DDR
+//# define CONFIG_TI814X_EVM_DDR2
+#define CONFIG_TI814X_EVM_DDR3
 
-/* In the 1st stage we have just 110K, so cut down wherever possible */
-#ifdef CONFIG_TI814X_MIN_CONFIG
+#define CONFIG_ENV_SIZE			0x800
+# define CONFIG_SYS_MALLOC_LEN		(CONFIG_ENV_SIZE + (8 * 1024))
+#define CONFIG_SYS_GBL_DATA_SIZE	128	/* size in bytes reserved for initial data */
 
-# define CONFIG_CMD_MEMORY	/* for mtest */
+#ifndef TI81XX_SECOND_STAGE
 # undef CONFIG_GZIP
 # undef CONFIG_ZLIB
-//# undef CONFIG_BOOTM_LINUX
-//# undef CONFIG_BOOTM_NETBSD
-//# undef CONFIG_BOOTM_RTEMS
-//# undef CONFIG_SREC
-//# undef CONFIG_XYZMODEM
-# undef CONFIG_SYS_HUSH_PARSER
-# define CONFIG_CMD_LOADB	/* loadb			*/
-# define CONFIG_CMD_LOADY	/* loady */
-# define CONFIG_SETUP_PLL
-# define CONFIG_TI814X_CONFIG_DDR
-# define CONFIG_TI814X_EVM_DDR3
-/*
- * # define CONFIG_TI814X_EVM_DDR2
- */ 
-# define CONFIG_ENV_SIZE		0x400
-# define CONFIG_SYS_MALLOC_LEN		(CONFIG_ENV_SIZE + (8 * 1024))
-# define CONFIG_SYS_PROMPT		"TI-MIN#"
-/* set to negative value for no autoboot */
-# define CONFIG_BOOTDELAY		0
-# if defined(CONFIG_SPI_BOOT)		/* Autoload the 2nd stage from SPI */
-#  define CONFIG_SPI			1
-#  define CONFIG_EXTRA_ENV_SETTINGS \
-	"verify=yes\0" \
-	"bootcmd=sf probe 0; sf read 0x81000000 0x20000 0x40000; go 0x81000000\0" \
+#endif
 
-# elif defined(CONFIG_NAND_BOOT)		/* Autoload the 2nd stage from NAND */
-#  define CONFIG_NAND			1
-#  define CONFIG_EXTRA_ENV_SETTINGS \
-	"verify=yes\0" \
-	"bootcmd=nand read 0x81000000 0x20000 0x40000; go 0x81000000\0" \
+#define CONFIG_CMD_RUN 
+#define CONFIG_CMD_MEMORY	/* for mtest */
+#define CONFIG_CMD_ECHO
 
-# elif defined(CONFIG_SD_BOOT)		/* Autoload the 2nd stage from SD */
-#  define CONFIG_MMC			1
-#  define CONFIG_EXTRA_ENV_SETTINGS \
-	"verify=yes\0" \
-	"bootcmd=mmc rescan 0; fatload mmc 0 0x80800000 u-boot.bin; go 0x80800000\0" \
+#define CONFIG_SETUP_PLL
 
-#elif defined(CONFIG_UART_BOOT)                /* stop in the min prompt */
-#define CONFIG_EXTRA_ENV_SETTINGS \
-	"verify=yes\0" \
-	"bootcmd=\0" \
+#define CONFIG_CMDLINE_TAG		1	/* enable passing of ATAGs  */
+#define CONFIG_SETUP_MEMORY_TAGS	1
+#define CONFIG_INITRD_TAG		1	/* Required for ramdisk support */
 
-#elif defined(CONFIG_ETH_BOOT)		/* Auto load 2nd stage from server */
-#  define CONFIG_EXTRA_ENV_SETTINGS \
-	"verify=yes\0" \
-	"bootcmd=setenv autoload no;dhcp; tftp 0x81000000 u-boot.bin; go 0x81000000\0"
+#define CONFIG_VERSION_VARIABLE
 
-# endif
+# undef CONFIG_CRC32_VERIFY
+# undef CONFIG_SYS_HUSH_PARSER
+# undef CONFIG_DISPLAY_CPUINFO
+# undef CONFIG_SPI
+# undef CONFIG_I2C
 
-#else
+# define CONFIG_BOOTDELAY	0
+# define CONFIG_SYS_AUTOLOAD	"no"
 
-# include <config_cmd_default.h>
-# define CONFIG_SKIP_LOWLEVEL_INIT	/* 1st stage would have done the basic init */
-# define CONFIG_ENV_SIZE			0x2000
-# define CONFIG_SYS_MALLOC_LEN		(CONFIG_ENV_SIZE + (32 * 1024))
-# define CONFIG_ENV_OVERWRITE
-# define CONFIG_SYS_LONGHELP
-# define CONFIG_SYS_PROMPT		"TI8148_EVM#"
-# define CONFIG_SYS_HUSH_PARSER		/* Use HUSH parser to allow command parsing */
-# define CONFIG_SYS_PROMPT_HUSH_PS2	"> "
-# define CONFIG_CMDLINE_TAG        	1	/* enable passing of ATAGs  */
-# define CONFIG_SETUP_MEMORY_TAGS  	1
-# define CONFIG_INITRD_TAG	  	1	/* Required for ramdisk support */
-# define CONFIG_BOOTDELAY		3	/* set to negative value for no autoboot */
-/* By default, 2nd stage will have MMC, NAND, SPI and I2C support */
+/*
+ * tfm TODO:
+ * - figure which kernel (i.e. which NAND offset) to boot (timestamp, last kernel tried, last kernel succeeded,)
+ * - figure which filesystem to use (timestamp)
+ * - boot the right kernel with the freshest rootfs
+ */
+
+#ifdef TI81XX_SECOND_STAGE
+# define BOOTNAND_CMD \
+    "bootnand=setenv verify no; setenv bootargs "\
+                    "console=ttyO0,115200n8 rootwait root=${rootfs_device} ro rootfstype=squashfs mem=1024M earlyprink vram=50M ip=off noinitrd user_debug=255;" \
+                "nboot 0x80007FC0 0 ${kernel_offset}; bootm;\0"
+#else 
+# define BOOTNAND_CMD \
+    "bootnand=setenv verify no; setenv bootargs "\
+                    "console=ttyO0,115200n8 quiet rootwait root=${rootfs_device} ro rootfstype=squashfs mem=1024M earlyprink vram=50M ip=off noinitrd user_debug=255 systemd.log_target=kmsg;" \
+                "nboot 0x80007FC0 0 ${kernel_offset}; bootm;\0"
+#endif
+
+# define CONFIG_EXTRA_ENV_SETTINGS \
+    "kernel_offset=0x200000\0"\
+    "rootfs_device=/dev/blockrom4\0"\
+    "boot2nd=mmc rescan 0; "\
+                    "fatload mmc 0 0x80800000 u-boot-2nd.sd;"\
+                    "go 0x80800000\0" \
+    "bootsd=mmc rescan 0;setenv verify no; "\
+                            "setenv bootargs "\
+                                "console=ttyO0,115200n8 rootwait root=/dev/mmcblk0p2 ro rootfstype=ext4 mem=1024M earlyprink vram=50M ip=off noinitrd user_debug=255 systemd.log_target=kmsg;" \
+                            "fatload mmc 0 0x80007FC0 uImage;"\
+                            "bootm 0x80007FC0\0" \
+    BOOTNAND_CMD \
+    "flash_uboot=mmc rescan 0;mw.b 0x82000000 0xFF 0x100000;"\
+                "fatload mmc 0 0x82000000 MLO.nand;"\
+                "nandecc hw 2;"\
+                "nand erase 0x0 0x100000;"\
+                "nand write.i 0x82000000 0x0 0x100000;"\
+                "nandecc hw 0;\0"\
+    "flash_kernel=mmc rescan 0; "\
+                "mw.b 0x82000000 0xFF 0xa00000;"\
+                "fatload mmc 0 0x82000000 uImage;"\
+                "nand erase 0x200000 0xa00000;"\
+                "nand write.i 0x82000000 0x200000 0xa00000\0"\
+    "flash_rootfs=mmc rescan 0; "\
+                "mw.b 0x82000000 0xFF 0x6400000;"\
+                "fatload mmc 0 0x82000000 hidav-root-fs.squashfs;"\
+                "nand erase clean 0x1600000 0x6400000;"\
+                "nand write.i 0x82000000 0x1600000 0x6400000;\0"\
+    "flash_system=run flash_uboot;run flash_kernel;run flash_rootfs;"\
+ 
+#ifdef CONFIG_SD_BOOT
+# undef CONFIG_NAND
+# undef TI814X_ENABLE_ICACHE    /* tfm: enabling i-cache breaks second stage u-boot on 814x :-/ */
 # define CONFIG_MMC			1
+# define CONFIG_BOOTCOMMAND "run boot2nd"
+# define CONFIG_ENV_IS_NOWHERE /* no "saveenv" for you! */
+#else
+# undef CONFIG_MMC
 # define CONFIG_NAND			1
-# define CONFIG_SPI			1
-# define CONFIG_I2C			1
-# define CONFIG_EXTRA_ENV_SETTINGS \
-	"verify=yes\0" \
-	"bootfile=uImage\0" \
-	"ramdisk_file=ramdisk.gz\0" \
-	"loadaddr=0x81000000\0" \
-	"script_addr=0x80900000\0" \
-	"loadbootscript=fatload mmc 0 ${script_addr} boot.scr\0" \
-	"bootscript= echo Running bootscript from MMC/SD to set the ENV...; " \
-		"source ${script_addr}\0" \
+# define CONFIG_BOOTCOMMAND "run bootnand"
+# define TI814X_ENABLE_ICACHE
+#endif
 
-# define CONFIG_BOOTCOMMAND \
-	"if mmc rescan 0; then " \
-		"if run loadbootscript; then " \
-			"run bootscript; " \
-		"else " \
-			"echo In case ENV on MMC/SD is required; "\
-			"echo Please put a valid script named boot.scr on the card; " \
-			"echo Refer to the User Guide on how to generate the image; " \
-		"fi; " \
-	"else " \
-		"echo Please set bootargs and bootcmd before booting the kernel; " \
-		"echo If that has already been done please ignore this message; "\
-	"fi"
+#ifdef TI81XX_SECOND_STAGE
 
+#define CONFIG_CMD_ASKENV
+#define CONFIG_MMC			1
 
-#endif
+#define TI814X_ENABLE_ICACHE
 
-#define CONFIG_SYS_GBL_DATA_SIZE	128	/* size in bytes reserved for
-						   initial data */
+/* U-Boot default commands */
+# include <config_cmd_default.h>
+# define CONFIG_SYS_HUSH_PARSER		/* Use HUSH parser to allow command parsing */
+# define CONFIG_SYS_PROMPT_HUSH_PS2	"> "
+#undef CONFIG_BOOTCOMMAND
+#define CONFIG_BOOTCOMMAND "run bootsd"
+#undef CONFIG_BOOTDELAY
+#define CONFIG_BOOTDELAY 5
+#undef CONFIG_SYS_MALLOC_LEN
+#define CONFIG_SYS_MALLOC_LEN		(CONFIG_ENV_SIZE + (32 * 1024))
+ 
+#define CONFIG_ENV_OVERWRITE
+#define CONFIG_SYS_LONGHELP
+#define CONFIG_SKIP_LOWLEVEL_INIT	/* 1st stage would have done the basic init */
+#define CONFIG_ENV_IS_NOWHERE /* no "saveenv" for you! */
 
-#define CONFIG_MISC_INIT_R		1
-#ifndef CONFIG_TI814X_MIN_CONFIG
-# define CONFIG_TI814X_ASCIIART		1	/* The centaur */
 #endif
-#define CONFIG_SYS_AUTOLOAD		"yes"
-#define CONFIG_CMD_CACHE
-#define CONFIG_CMD_ECHO
 
 /*
  * Miscellaneous configurable options
  */
 
+# define CONFIG_SYS_LONGHELP
 /* max number of command args */
 #define CONFIG_SYS_MAXARGS		32
 /* Console I/O Buffer Size */
 #define CONFIG_SYS_CBSIZE		512
+/* Monitor Command Prompt */
+#define CONFIG_SYS_PROMPT		"HidaV boot on 814x#"
 /* Print Buffer Size */
 #define CONFIG_SYS_PBSIZE		(CONFIG_SYS_CBSIZE \
 					+ sizeof(CONFIG_SYS_PROMPT) + 16)
diff --git a/include/configs/ti8168_evm.h b/include/configs/ti8168_evm.h
index c615e9a..cebc2f9 100644
--- a/include/configs/ti8168_evm.h
+++ b/include/configs/ti8168_evm.h
@@ -17,98 +17,127 @@
 #ifndef __CONFIG_TI816X_EVM_H
 #define __CONFIG_TI816X_EVM_H
 
-/* U-Boot default commands */
-#include <config_cmd_default.h>
+/* Only one the following two options (DDR3/DDR2) should be enabled */
+#define CONFIG_TI816X_EVM_DDR3
+//#define CONFIG_TI816X_EVM_DDR2
 
-/* Display CPU info */
-#define CONFIG_DISPLAY_CPUINFO		1
+#define CONFIG_TI816X_TWO_EMIF		1
 
-//#define CONFIG_SETUP_1V
-/*
- * Size of malloc() pool
- */
-#define CONFIG_ENV_SIZE			0x2000
-#define CONFIG_SYS_MALLOC_LEN		(CONFIG_ENV_SIZE + (32 * 1024))
-#define CONFIG_SYS_GBL_DATA_SIZE	128	/* size in bytes reserved for
-						   initial data */
+#define CONFIG_ENV_SIZE			0x800
+#define CONFIG_SYS_MALLOC_LEN		(CONFIG_ENV_SIZE + (8 * 1024))
+#define CONFIG_SYS_GBL_DATA_SIZE	128	/* size in bytes reserved for initial data */
 
-/* Only one the following two options (DDR3/DDR2) should be enabled */
-#define CONFIG_TI816X_EVM_DDR3			/* Configure DDR3 in U-Boot */
-//#define CONFIG_TI816X_EVM_DDR2				/* Configure DDR2 in U-Boot */
-#define CONFIG_TI816X_TWO_EMIF		1
-#define CONFIG_MISC_INIT_R		1
-#define CONFIG_TI816X_ASCIIART		1	/* The eye */
+#ifndef TI81XX_SECOND_STAGE
+# undef CONFIG_GZIP
+# undef CONFIG_ZLIB
+#endif
+
+#define CONFIG_CMD_RUN 
+#define CONFIG_CMD_MEMORY	/* for mtest */
+#define CONFIG_CMD_ECHO
+
+#define CONFIG_SETUP_PLL
 
 #define CONFIG_CMDLINE_TAG		1	/* enable passing of ATAGs  */
 #define CONFIG_SETUP_MEMORY_TAGS	1
 #define CONFIG_INITRD_TAG		1	/* Required for ramdisk support */
 
-#define CONFIG_CMD_ASKENV
 #define CONFIG_VERSION_VARIABLE
-#define CONFIG_CMD_ECHO
-
-/* By default, any image built will have MMC, NAND, SPI and I2C support */
-#define CONFIG_MMC			1
-#define CONFIG_NAND			1
-#define CONFIG_SPI			1
-#define CONFIG_I2C			1
 
-/* Minimal image which runs out of internal memory */
-#ifdef CONFIG_MINIMAL
-# undef CONFIG_MMC
-# undef CONFIG_NAND
+# undef CONFIG_CRC32_VERIFY
+# undef CONFIG_SYS_HUSH_PARSER
+# undef CONFIG_TI816X_ASCIIART
+# undef CONFIG_DISPLAY_CPUINFO
 # undef CONFIG_SPI
 # undef CONFIG_I2C
-# define CONFIG_NO_ETH
-#endif
 
+# define CONFIG_BOOTDELAY	0
+# define CONFIG_SYS_AUTOLOAD	"no"
 
 
-/* Due to size restrictions in RBL while in SD Boot mode, NAND/NOR support
- * cannot co-exist in the same u-boot image that is loaded by the RBL from
- * MMC/SD card.
+/*
+ * tfm TODO:
+ * - figure which kernel (i.e. which NAND offset) to boot (timestamp, last kernel tried, last kernel succeeded,)
+ * - figure which filesystem to use (timestamp)
+ * - boot the right kernel with the freshest rootfs
  */
+
+#ifdef TI81XX_SECOND_STAGE
+# define BOOTNAND_CMD \
+    "bootnand=setenv verify no; setenv bootargs "\
+                    "console=ttyO2,115200n8 rootwait root=${rootfs_device} ro rootfstype=squashfs mem=1024M earlyprink vram=50M ip=off noinitrd user_debug=255;" \
+                "nboot 0x80007FC0 0 ${kernel_offset}; bootm;\0"
+#else 
+# define BOOTNAND_CMD \
+    "bootnand=setenv verify no; setenv bootargs "\
+                    "console=ttyO2,115200n8 quiet rootwait root=${rootfs_device} ro rootfstype=squashfs mem=1024M earlyprink vram=50M ip=off noinitrd user_debug=255 systemd.log_target=kmsg;" \
+                "nboot 0x80007FC0 0 ${kernel_offset}; bootm;\0"
+#endif
+
+
+# define CONFIG_EXTRA_ENV_SETTINGS \
+    "kernel_offset=0x200000\0"\
+    "rootfs_device=/dev/blockrom4\0"\
+    "boot2nd=mmc rescan 0; "\
+                    "fatload mmc 0 0x80800000 u-boot-2nd.sd;"\
+                    "go 0x80800000\0" \
+    "bootsd=mmc rescan 0;setenv verify no; "\
+                            "setenv bootargs "\
+                                "console=ttyO2,115200n8 rootwait root=/dev/mmcblk0p2 ro earlyprink mem=1024M vram=50M ip=off noinitrd user_debug=255 systemd.log_target=kmsg;" \
+                            "fatload mmc 0 0x80007FC0 uImage;"\
+                            "bootm 0x80007FC0\0" \
+    BOOTNAND_CMD \
+    "flash_uboot=mmc rescan 0;mw.b 0x82000000 0xFF 0x100000;"\
+                "fatload mmc 0 0x82000000 MLO.nand;"\
+                "nandecc hw 2;"\
+                "nand erase 0x0 0x100000;"\
+                "nand write.i 0x82000000 0x0 0x100000;"\
+                "nandecc hw 0;\0"\
+    "flash_kernel=mmc rescan 0; "\
+                "mw.b 0x82000000 0xFF 0xa00000;"\
+                "fatload mmc 0 0x82000000 uImage;"\
+                "nand erase 0x200000 0xa00000;"\
+                "nand write.i 0x82000000 0x100000 0xa00000\0"\
+    "flash_rootfs=mmc rescan 0; "\
+                "mw.b 0x82000000 0xFF 0x6400000;"\
+                "fatload mmc 0 0x82000000 hidav-root-fs.squashfs;"\
+                "nand erase clean 0x1600000 0x6400000;"\
+                "nand write.i 0x82000000 0x1600000 0x6400000;\0"\
+    "flash_system=run flash_uboot;run flash_kernel;run flash_rootfs;"\
+
 #ifdef CONFIG_SD_BOOT
-# undef CONFIG_TI816X_ASCIIART
-# undef CONFIG_DISPLAY_CPUINFO
-# undef CONFIG_NAND
-# undef CONFIG_SPI
-# undef CONFIG_I2C
-# undef CONFIG_SYS_HUSH_PARSER
-# define CONFIG_NO_ETH
-# define CONFIG_BOOTDELAY	0
-# define CONFIG_SYS_AUTOLOAD	"yes"
-# define CONFIG_BOOTCOMMAND	"mmc rescan 0;fatload mmc 0 0x80800000 u-boot.bin;go 0x80800000"
-# define CONFIG_ENV_IS_NOWHERE
+#undef CONFIG_NAND
+#define CONFIG_MMC			1
+#define CONFIG_BOOTCOMMAND "run boot2nd"
+#define CONFIG_ENV_IS_NOWHERE /* no "saveenv" for you! */
 #else
+#define CONFIG_NAND			1
+#define CONFIG_BOOTCOMMAND "run bootnand"
+#endif
+
+#ifdef TI81XX_SECOND_STAGE
+
+#define CONFIG_CMD_ASKENV
+#define CONFIG_MMC			1
+
+/* U-Boot default commands */
+#include <config_cmd_default.h>
+
 # define CONFIG_SYS_HUSH_PARSER		/* Use HUSH parser to allow command parsing */
 # define CONFIG_SYS_PROMPT_HUSH_PS2	"> "
-# define CONFIG_BOOTDELAY		3	/* set to negative value for no autoboot */
-# define CONFIG_SYS_AUTOLOAD		"no"
-# define CONFIG_EXTRA_ENV_SETTINGS \
-	"verify=yes\0" \
-	"bootfile=uImage\0" \
-	"ramdisk_file=ramdisk.gz\0" \
-	"loadaddr=0x81000000\0" \
-	"script_addr=0x80900000\0" \
-	"loadbootscript=fatload mmc 0 ${script_addr} boot.scr\0" \
-	"bootscript= echo Running bootscript from MMC/SD to set the ENV...; " \
-		"source ${script_addr}\0" \
 
-#define CONFIG_BOOTCOMMAND \
-	"if mmc rescan 0; then " \
-		"if run loadbootscript; then " \
-			"run bootscript; " \
-		"else " \
-			"echo In case ENV on MMC/SD is required; "\
-			"echo Please put a valid script named boot.scr on the card; " \
-			"echo Refer to the User Guide on how to generate the image; " \
-		"fi; " \
-	"else " \
-		"echo Please set bootargs and bootcmd before booting the kernel; " \
-		"echo If that has already been done please ignore this message; "\
-	"fi"
+#define CONFIG_MMC			1
+#undef CONFIG_BOOTCOMMAND
+#undef CONFIG_BOOTDELAY
+#define CONFIG_BOOTCOMMAND "run bootsd"
+#define CONFIG_BOOTDELAY 5
+#undef CONFIG_SYS_MALLOC_LEN
+#define CONFIG_SYS_MALLOC_LEN		(CONFIG_ENV_SIZE + (32 * 1024))
 
+#define CONFIG_ENV_OVERWRITE
+#define CONFIG_SYS_LONGHELP
+#define CONFIG_SKIP_LOWLEVEL_INIT	/* 1st stage would have done the basic init */
+#define CONFIG_ENV_IS_NOWHERE /* no "saveenv" for you! */
 
 #endif
 
@@ -120,7 +149,7 @@
 /* Undef to save memory */
 #define CONFIG_SYS_LONGHELP
 /* Monitor Command Prompt */
-#define CONFIG_SYS_PROMPT		"TI8168_EVM#"
+#define CONFIG_SYS_PROMPT		"HidaV boot on 816x#"
 /* Console I/O Buffer Size */
 #define CONFIG_SYS_CBSIZE		512
 /* Print Buffer Size */
@@ -144,11 +173,11 @@
 /**
  * Physical Memory Map
  */
-#define CONFIG_NR_DRAM_BANKS		2		/* we have 2 banks of DRAM */
-#define PHYS_DRAM_1			0x80000000	/* DRAM Bank #1 */
-#define PHYS_DRAM_1_SIZE		0x40000000	/* 1 GB */
-#define PHYS_DRAM_2			0xC0000000	/* DRAM Bank #2 */
-#define PHYS_DRAM_2_SIZE		0x40000000	/* 1 GB */
+#define CONFIG_NR_DRAM_BANKS             2  /* we have 2 banks of DRAM */
+#define PHYS_DRAM_1             0x80000000	/* DRAM Bank #1 */
+#define PHYS_DRAM_1_SIZE        0x20000000	/* 512 MB */
+#define PHYS_DRAM_2	            0xA0000000	/* DRAM Bank #2 */
+#define PHYS_DRAM_2_SIZE        0x20000000	/* 512 MB */
 
 
 /**
@@ -268,17 +297,6 @@ extern unsigned int boot_flash_type;
 # endif
 #endif /* SPI support */
 
-/* ENV in MMC */
-#if defined(CONFIG_MMC_ENV)
-#undef CONFIG_ENV_IS_NOWHERE
-#define CONFIG_ENV_IS_IN_MMC		1
-#define CONFIG_SYS_MMC_ENV_DEV		0
-#undef CONFIG_ENV_SIZE
-#undef CONFIG_ENV_OFFSET
-#define CONFIG_ENV_OFFSET		(6 * 64 * 1024)
-#define CONFIG_ENV_SIZE			(8 * 1024)
-#endif /* MMC support */
-
 /* NOR support */
 #if defined(CONFIG_NOR)
 # undef CONFIG_CMD_NAND			/* Remove NAND support */
@@ -323,9 +341,8 @@ extern unsigned int boot_flash_type;
 
 /* HSMMC Definitions */
 #ifdef CONFIG_MMC
+# define CONFIG_OMAP3_MMC	1
 # define CONFIG_CMD_MMC		1
-#define CONFIG_GENERIC_MMC
-#define CONFIG_OMAP_HSMMC
 # define CONFIG_DOS_PARTITION	1
 # define CONFIG_CMD_FAT		1
 #endif
@@ -333,5 +350,13 @@ extern unsigned int boot_flash_type;
 /* Unsupported features */
 #undef CONFIG_USE_IRQ
 
+/* tfm: yeah, we really don't want any persistent u-boot env anywhere */
+#ifdef CONFIG_NAND_ENV
+#undef CONFIG_NAND_ENV
+#undef CONFIG_ENV_IS_IN_FLASH
+#undef CONFIG_ENV_IS_IN_NAND
+#define CONFIG_ENV_IS_NOWHERE
+#endif
+
 #endif	  /* ! __CONFIG_TI816X_EVM_H */
 
