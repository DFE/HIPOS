From a40b590c99389d635bcbbeb817702b7b38218dbf Mon Sep 17 00:00:00 2001
From: Eik Binschek <binschek@dresearch-fe.de>
Date: Fri, 11 May 2012 13:58:18 +0200
Subject: [PATCH] u-boot: add boot-config read

	Now boot config is used to switch root-fs-partition and kernel-patition.

Signed-off-by: Eik Binschek <binschek@dresearch-fe.de>
---

diff --git a/common/main.c b/common/main.c
index f7e7c1c..cd942d7 100644
--- a/common/main.c
+++ b/common/main.c
@@ -44,6 +44,9 @@
 DECLARE_GLOBAL_DATA_PTR;
 #endif
 
+#include <lowlevel.h>
+#include <config.h>
+
 /*
  * Board-specific Platform code can reimplement show_boot_progress () if needed
  */
@@ -369,6 +372,72 @@ void main_loop (void)
 	update_tftp ();
 #endif /* CONFIG_UPDATE_TFTP */

+#ifdef CONFIG_NAND
+/* Boot Config NAND Flash */
+{
+        struct bootconfig bc;
+        struct btblock *btblock_test;
+        uint32_t block_index=0;
+        int ret = NULL;
+        enum bt_ll_parttype which=kernel;  /* { kernel, rootfs }; */
+
+        bc_ll_init( &bc , "/dev/mtd1" );
+        btblock_test = bc_ll_get_current ( &bc, &block_index );
+
+        if ( btblock_test != 0)
+        {
+                printf ("NAND-BootConfig:\n");
+                printf ("Epoch = %d\n", btblock_test->epoch);
+                printf ("Kernel not booted  = %d\n", btblock_test->kernel.n_booted );
+                printf ("Kernel not healthy = %d\n", btblock_test->kernel.n_healthy );
+                printf ("Rootfs not booted  = %d\n", btblock_test->rootfs.n_booted );
+                printf ("Rootfs not healthy = %d\n", btblock_test->rootfs.n_healthy );
+
+                /* rootfs_device=/dev/blockrom4\0       */
+                /* kernel_offset=0x200000\0 */
+                if( btblock_test->kernel.partition == 1 )
+                {
+                        setenv ("kernel_offset", "0xC00000\0");
+                        printf ("kernel_offset=0xC00000\n");
+                }
+                else
+                {
+                        setenv ("kernel_offset", "0x200000\0");
+                        printf ("kernel_offset=0x200000\n");
+                }
+
+                if( btblock_test->rootfs.partition == 1 )
+                {
+                        setenv ("rootfs_device", "/dev/blockrom5\0");
+                        printf ("rootfs_device=\"/dev/blockrom5\"\n");
+                }
+                else
+                {
+                        setenv ("rootfs_device", "/dev/blockrom4\0");
+                        printf ("rootfs_device=\"/dev/blockrom4\"\n");
+                }
+
+                if ( (btblock_test->kernel.n_booted == 1) || (btblock_test->rootfs.n_booted == 1) )
+                {
+                        printf ("First Boot of Epoch %d configuration.\n", btblock_test->epoch);
+                        if (btblock_test->kernel.n_booted == 1)
+                                printf ("Set Kernel-booted-Flag of Epoch %d configuration.\n", btblock_test->epoch);
+                        if (btblock_test->rootfs.n_booted == 1)
+                                printf ("Set Rootfs-booted-Flag of Epoch %d configuration.\n", btblock_test->epoch);
+
+                        bc_ll_set_booted_flag_on_current( &bc );
+                        printf ("NEW NAND-BootConfig:\n");
+                        printf ("Epoch = %d\n", btblock_test->epoch);
+                        printf ("Kernel not booted  = %d\n", btblock_test->kernel.n_booted );
+                        printf ("Kernel not healthy = %d\n", btblock_test->kernel.n_healthy );
+                        printf ("Rootfs not booted  = %d\n", btblock_test->rootfs.n_booted );
+                        printf ("Rootfs not healthy = %d\n", btblock_test->rootfs.n_healthy );
+                }
+        }
+
+}
+#endif
+ 
 #if defined(CONFIG_BOOTDELAY) && (CONFIG_BOOTDELAY >= 0)
 	s = getenv ("bootdelay");
 	bootdelay = s ? (int)simple_strtol(s, NULL, 10) : CONFIG_BOOTDELAY;

diff --git a/lib/Makefile b/lib/Makefile
index c45f07c..be518e6 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -32,6 +32,8 @@ COBJS-$(CONFIG_BZIP2) += bzlib_decompress.o
 COBJS-$(CONFIG_BZIP2) += bzlib_randtable.o
 COBJS-$(CONFIG_BZIP2) += bzlib_huffman.o
 COBJS-$(CONFIG_USB_TTY) += circbuf.o
+COBJS-y += lowlevel.o
+COBJS-y += logging.o
 COBJS-y += crc16.o
 COBJS-y += crc32.o
 COBJS-y += ctype.o
 
