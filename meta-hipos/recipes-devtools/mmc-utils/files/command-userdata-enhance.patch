From f0b9fe0b6b25ce1e957c3c31823703f3e8a414f6 Mon Sep 17 00:00:00 2001
From: Mario Schuknecht <mario.schuknecht@dresearch-fe.de>
Date: Mon, 17 Jun 2013 10:02:31 +0200
Subject: [PATCH] Add command: userdata enhance

Add command line parameter 'userdata enhance' which set Enhanced attribute
in User Data Area and Enhanced User Data Area size to max. amount of memory area
which can have enhanced attribute.
The 'userdata enhance' command is used to partition the entire memory as
User Data Area enhanced.
NOTE!  This command is a one-time programmable change.

Signed-off-by: Mario Schuknecht <mario.schuknecht@dresearch-fe.de>
---
 mmc.c      |    8 ++++
 mmc.h      |    1 +
 mmc_cmds.c |  129 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 mmc_cmds.h |    1 +
 4 files changed, 139 insertions(+)

diff --git a/mmc.c b/mmc.c
index a757c8f..62f0d3c 100644
--- a/mmc.c
+++ b/mmc.c
@@ -50,6 +50,14 @@ static struct Command commands[] = {
 	/*
 	 *	avoid short commands different for the case only
 	 */
+	{ do_enh_user_area, -1,
+	  "userdata enhance", "<device>\n"
+		"Set Enhanced attribute in User Data Area \n"
+		"and Enhanced User Data Area size to max. amount of memory area \n"
+		"which can have enhanced attribute.\n"
+		"NOTE!  This is a one-time programmable (unreversible) change.",
+	  NULL
+	},
 	{ do_read_extcsd, -1,
 	  "extcsd read", "<device>\n"
 		"Print extcsd data from <device>.",
diff --git a/mmc.h b/mmc.h
index 5173d34..3bb1ee1 100644
--- a/mmc.h
+++ b/mmc.h
@@ -41,6 +41,7 @@
 #define EXT_CSD_SANITIZE_START		165
 #define EXT_CSD_BKOPS_EN		163	/* R/W */
 #define EXT_CSD_RST_N_FUNCTION		162	/* R/W */
+#define EXT_CSD_PARTITIONING_SUPPORT	160	/* R */
 #define EXT_CSD_NATIVE_SECTOR_SIZE	63 /* R */
 #define EXT_CSD_USE_NATIVE_SECTOR	62 /* R/W */
 #define EXT_CSD_DATA_SECTOR_SIZE	61 /* R */
diff --git a/mmc_cmds.c b/mmc_cmds.c
index 5473a20..fd2dea2 100644
--- a/mmc_cmds.c
+++ b/mmc_cmds.c
@@ -795,3 +795,132 @@ int do_sanitize(int nargs, char **argv)
 
 }
 
+static void write_extcsd_size(int fd, __u8 index, int size, char *device)
+{
+	int ret;
+	int i;
+	for(i=2; i>=0; i--, index--) {
+		__u8 value = size>>(i*8);
+		ret = write_extcsd_value(fd, index, value);
+		if (ret) {
+			fprintf(stderr, "Could not write 0x%02x to EXT_CSD[%d] in %s\n", value, index, device);
+			exit(1);
+		}
+	}
+}
+
+int do_enh_user_area(int nargs, char **argv)
+{
+	__u8 ext_csd[512], ext_csd_rev;
+	int fd, ret;
+	char *device;
+	const char *str;
+
+	CHECK(nargs != 2, "Usage: mmc  </path/to/mmcblkX>\n",
+			  exit(1));
+
+	device = argv[1];
+
+	fd = open(device, O_RDWR);
+	if (fd < 0) {
+		perror("open");
+		exit(1);
+	}
+
+	ret = read_extcsd(fd, ext_csd);
+	if (ret) {
+		fprintf(stderr, "Could not read EXT_CSD from %s\n", device);
+		exit(1);
+	}
+
+	ext_csd_rev = ext_csd[192];
+
+	switch (ext_csd_rev) {
+	case 6:
+		str = "4.5";
+		break;
+	case 5:
+		str = "4.41";
+		break;
+	case 3:
+		str = "4.3";
+		break;
+	case 2:
+		str = "4.2";
+		break;
+	case 1:
+		str = "4.1";
+		break;
+	case 0:
+		str = "4.0";
+		break;
+	default:
+		goto out_free;
+	}
+	printf("=============================================\n");
+	printf("  Extended CSD rev 1.%d (MMC %s)\n", ext_csd_rev, str);
+	printf("=============================================\n\n");
+
+	if (ext_csd_rev < 5) {
+		printf("Extended CSD rev must be >= 5 is %d\n", ext_csd_rev);
+		goto out_free; /* No ext_csd */
+	}
+
+	if (!(ext_csd[EXT_CSD_PARTITIONING_SUPPORT] & 0x2)) {
+		fprintf(stderr, "%s doesn't support partitioning features\n", device);
+		exit(1);
+	}
+	if (!(ext_csd[EXT_CSD_PARTITIONING_SUPPORT] & 0x1)) {
+		fprintf(stderr, "%s cannot have enhanced technological features\n", device);
+		exit(1);
+	}
+	if ((ext_csd[155] & 0x1)) {
+		fprintf(stderr, "%s partition setting already completed\n", device);
+		exit(1);
+	}
+	if (0 == (ext_csd[224])) {
+		fprintf(stderr, "%s no support for high-capacity erase-unit size. [HC_ERASE_GRP_SIZE: 0x%02x]\n", device, ext_csd[224]);
+		exit(1);
+	}
+	if (0 == (ext_csd[221])) {
+		fprintf(stderr, "%s no support for high-capacity write protect group size. [HC_WP_GRP_SIZE: 0x%02x]\n", device, ext_csd[221]);
+		exit(1);
+	}
+	if (!(ext_csd[175] & 0x1)) {
+		fprintf(stderr, "%s High-density erase group definition not enabled\n", device);
+		exit(1);
+	}
+	int max_enc_size_mult = (ext_csd[159] << 16) | (ext_csd[158] << 8) | ext_csd[157];
+
+	int enh_start_addr = (ext_csd[139] << 24) | (ext_csd[138] << 16) | (ext_csd[137] << 8) | ext_csd[136];
+	if (0 != enh_start_addr) {
+		fprintf(stderr, "%s Start address of Enhanced User Data Area segment [ENH_START_ADDR: 0x%08x] is not 0\n", device, enh_start_addr);
+		exit(1);
+	}
+
+	/* program EXT_CSD register */
+	int enh_size_mult = max_enc_size_mult;
+
+	/* CAUTION: irreversible programming */
+	/* ENH_SIZE_MULT */
+	write_extcsd_size(fd, 142, enh_size_mult, device);
+	/* PARTITIONS_ATTRIBUTE */
+	ret = write_extcsd_value(fd, 156, 0x01);
+	if (ret) {
+		fprintf(stderr, "Could not write 0x%02x to EXT_CSD[%d] in %s\n", 0x1F, 156, device);
+		exit(1);
+	}
+	/* PARTITION_SETTING_COMPLETETED*/
+	ret = write_extcsd_value(fd, 155, 0x1);
+	if (ret) {
+		fprintf(stderr, "Could not write 0x%02x to EXT_CSD[%d] in %s\n", 0x1, 155, device);
+		exit(1);
+	}
+	/* END: irreversible programming */
+
+	printf("Set Enhanced User Data Area size [ENH_SIZE_MULT]: 0x%06x completed.\n", enh_size_mult);
+	close(fd);
+out_free:
+	return ret;
+}
+
diff --git a/mmc_cmds.h b/mmc_cmds.h
index ec22eee..2909b42 100644
--- a/mmc_cmds.h
+++ b/mmc_cmds.h
@@ -15,6 +15,7 @@
  */
 
 /* mmc_cmds.c */
+int do_enh_user_area(int nargs, char **argv);
 int do_read_extcsd(int nargs, char **argv);
 int do_write_extcsd(int nargs, char **argv);
 int do_writeprotect_get(int nargs, char **argv);
-- 
1.7.9.5

